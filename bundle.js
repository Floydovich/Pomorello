!function(e){var t={};function r(a){if(t[a])return t[a].exports;var i=t[a]={i:a,l:!1,exports:{}};return e[a].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,a){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(r.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(a,i,function(t){return e[t]}.bind(null,i));return a},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){e.exports=r(1)},function(e,t,r){"use strict";function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}r.r(t);class i{static info(e){i.level>=1&&i.log(e)}static debug(e){i.level>=2&&i.log(e)}static trace(e){i.level>=3&&i.log(e)}}function n(e,t){return i.trace("Creating notification..."),e.alert({message:t,duration:10,display:"success"})}async function s(e,t,r){return i.trace("Starting new set"),e.set("card","shared",{POMORELLO_ACTIVE:!0,POMORELLO_BREAK:!1,POMORELLO_START:Date.now(),POMORELLO_SET_LENGTH:6e4*t,POMORELLO_BREAK_LENGTH:6e4*r})}function o(e){i.trace("Showing dropdown powerup menu");const t={text:"Short Set:\n15m active, 3m break, 9m long break",callback:e=>s(e,15,3)},r={text:"Standard Set:\n25m active, 5m break, 15m long break",callback:e=>s(e,25,5)},a={text:"Long Set:\n 45m active, 10m break, 30m long break",callback:e=>s(e,45,5)};let n={};i.level>=2&&(n={text:"Debug Set: 1m active, 10s break, 30s long break",callback:e=>s(e,1,1/6)}),e.popup({title:"Start a Pomodoro",items:[t,r,a,n]})}a(i,"level",3),a(i,"log",console.log);const c="./clock.svg",l="./single-bed.svg";function d(e,t){return e.refresh?{refresh:e.refresh,...t}:t}function h(e){i.debug(`Displaying empty badge for card ${e.name}`);return d(e,{})}function _(e){i.debug(`Displaying status badge for card ${e.name}`);const t={icon:c,title:"Pomorello",text:`Pomodoro: ${e.timeStr()}`,color:"green"};return d(e,t)}function u(e){if(e.break_parity%3==0)return g(e);i.debug(`Displaying break badge for card ${e.name}`);const t={icon:l,title:"Pomorello",text:`Break: ${e.timeStr()}`,color:"blue"};return d(e,t)}function g(e){i.debug(`Displaying long break badge for card ${e.name}`);e.timeStr();return d(e,break_badge)}class b{constructor(e=10){i.trace(`Constructing new card with refresh ${e}`),this.is_active=!1,this.is_break=!1,this.start_ms=0,this.set_length=15e5,this.break_length=3e5,this.break_parity=0,this.set_hist={},this.name="?",this.refresh=e}async fetch(e){i.trace("Fetching data");const t=e.card("name");let r=await e.getAll();r=r.card.shared||{},i.trace("Got data"),this.is_active=r.POMORELLO_ACTIVE||this.is_active,this.is_break=r.POMORELLO_BREAK||this.is_break,this.start_ms=r.POMORELLO_START||this.start_ms,this.set_length=r.POMORELLO_SET_LENGTH||this.set_length,this.break_length=r.POMORELLO_BREAK_LENGTH||this.break_length,this.break_parity=r.POMORELLO_BREAK_PARITY||this.break_parity,this.set_hist=r.POMORELLO_SET_HISTORY||this.set_hist,this.name=(await t).name,i.info(JSON.stringify(this,null,2))}async sync(e){return i.trace(`Syncing card ${this.name}`),e.set("card","shared",{POMORELLO_ACTIVE:this.is_active,POMORELLO_BREAK:this.is_break,POMORELLO_START:this.start_ms,POMORELLO_SET_LENGTH:this.set_length,POMORELLO_BREAK_LENGTH:this.break_length,POMORELLO_BREAK_PARITY:this.break_parity,POMORELLO_SET_HISTORY:this.set_hist})}age(){const e=Date.now()-this.start_ms;return i.trace(`Computing age for card ${this.name}: ${e}`),e}timeStr(){let e;i.trace(`Formatting time for card ${this.name}`),this.is_active?e=this.set_length:this.is_break&&(e=this.break_length,this.break_parity%3==0&&(e*=3));const t=e-this.age();let r=Math.floor(t/1e3);return this.refresh&&(r=this.refresh*Math.ceil(r/this.refresh)),i.trace(`Formatting time for card ${this.name}: ${r} seconds`),`${(Math.floor(r/60)%60).toFixed(0).padStart(2,"0")}:${(r%60).toFixed(0).padStart(2,"0")}`}addSet(){i.trace(`Incrementing history of completed set for card ${this.name}`);const e=this.set_hist[this.set_length]||0;this.set_hist[this.set_length]=e+1,this.break_parity+=1}}window.TrelloPowerUp.initialize({"card-buttons":async()=>[{icon:"./target.svg",text:"Pomorello",callback:o}],"card-badges":e=>(i.trace("Loading card-badges"),[{dynamic:async()=>{const t=new b;i.debug("State initialized"),await t.fetch(e),i.info(`State retrieved for card ${t.name}`);const r=t.age();return t.is_active?(i.trace("Pomodoro active"),r>t.set_length?(i.trace("Pomodoro expired"),await async function(e,t){return i.trace(`Pomodoro for card ${t.name} finished.`),n(e,`Pomodoro for card ${t.name} complete.\nTime to take a break!`),t.is_active=!1,t.is_break=!0,t.start_ms=Date.now(),t.addSet(),t.sync(e)}(e,t),u(t)):(i.trace("Pomodoro in progress"),_(t))):t.is_break?(i.trace("Break active"),r>t.break_length?(i.trace("Break expired"),await async function(e,t){return i.trace(`Break for card ${t.name} finished.`),n(e,`Break for card ${t.name} has ended!`),t.is_active=!1,t.is_break=!1,t.sync(e)}(e,t),h(t)):(i.trace("Break in progress"),u(t))):(i.trace("No Pomodoro active"),h(t))}}]),"card-detail-badges":e=>(i.trace("Loading card-detail-badges"),[{dynamic:async()=>{const t=new b;return await t.fetch(e),t.is_active?_(t):t.is_break?u(t):h(t)}}])})}]);